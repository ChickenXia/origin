Mybatis动态sql是做什么的？都有哪些动态sql？简述一下动态sql的执行原理？
答：（1）动态sql是根据用户提供的参数，动态决定查询语句依赖的查询条件或SQL语句的内容。（2）使用<if>标签来判定某个字段是否为空，以及sql语句中是否使用；使用foreach标签，循环执行sql的拼接操作;<where>标签；<set>标签；<when>标签；<otherwise>标签；（3）使用mybatis自带的标签，动态的改变sql语句。

2、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？
答：支持。Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。
它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。

3、Mybatis都有哪些Executor执行器？它们之间的区别是什么？
SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。
BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。
作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。


4、简述下Mybatis的一级、二级缓存（分别从存储结构、范围、失效场景。三个方面来作答）？
存储结构：都是hashMap
范围：一级缓存是基于SqlSession级别的，也就是说某个SqlSession进行某个查询操作后会将该结果暂时缓存起来；二级缓存是基于Mapper级别的，也就是说多个SqlSession去使用某个Mapper的查询语句时，得到的缓存数据是可共用的。
失效场景：执行commit操作，增删改查会失效

5、简述Mybatis的插件运行原理，以及如何编写一个插件？
 * 在四大对象创建的时候
 * 1、每个创建出来的对象不是直接返回的，而是
 *      interceptorChain.pluginAll(parameterHandler);
 * 2、获取到所有的Interceptor（拦截器）（插件需要实现的接口）；
 *      调用interceptor.plugin(target);返回target包装后的对象
 * 3、插件机制，我们可以使用插件为目标对象创建一个代理对象；AOP（面向切面）
 *      我们的插件可以为四大对象创建出代理对象；
 *      代理对象就可以拦截到四大对象的每一个执行；